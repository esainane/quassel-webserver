doctype html
html(ng-app="quassel", ng-controller="ConfigController")
    head
      meta(charset='utf-8')
      title Quassel Web App
      meta(http-equiv='X-UA-Compatible', content='IE=edge')
      meta(name='description', content='Quassel Web App')
      meta(name='author', content='Joël Charles')
      meta(name='author', content='Johannes Siipola')
      meta(name="viewport", content="width=device-width, initial-scale=1")
      link(rel='icon', href='favicon.ico')
      style.
        [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak, .splash {
          display: none !important;
        }
        .ng-cloak.splash {
          display: block !important;
        }
      link(rel='stylesheet', href='#{settings.prefixpath}/stylesheets/bootstrap.min.css')
      link(rel='stylesheet', href='#{settings.prefixpath}/stylesheets/fonts.css')
      link(rel='stylesheet', href='#{settings.prefixpath}/stylesheets/theme-#{settings.theme}.css', default-theme="#{settings.theme}", theme)
    body.login-page
      script(type="text/javascript").
        quasselconf = {};
        quasselconf.initialBacklogLimit = #{settings.default.initialBacklogLimit};
        quasselconf.backlogLimit = #{settings.default.backlogLimit};
        quasselconf.unsecurecore = #{settings.unsecurecore};
        quasselconf.network = !{(settings.bootstrap && JSON.stringify(settings.bootstrap.network)) || '""'};
        quasselconf.channel = !{(settings.bootstrap && JSON.stringify(settings.bootstrap.channel)) || '""'};
      script(type="text/ng-template", id="modalJoinChannel.html")
        .modal-header
          button.close(type='button', ng-click='cancel()') ×
          h4#myModalLabel.modal-title
            | Join a channel on
            span#join-network-name  {{network.networkName}}
        .modal-body
          .form-group
            input.form-control(type='text', placeholder='Enter channel name', ng-model="name")
        .modal-footer
          button.btn.btn-default(type='button', ng-click='cancel()') Cancel
          button.btn.btn-default(type='button', ng-click='ok()') Join channel
      script(type="text/ng-template", id="modalGeneralConfig.html")
        .modal-header
          button.close(type='button', ng-click='$dismiss("close")') ×
          h4#myModalLabel.modal-title General configuration
        .modal-body
          .form-group.checkbox
            label
              input(type="checkbox", ng-model="gsdebug", ng-model-options="{ getterSetter: true }")
              | Display debug information in console ? (needs a refresh to take effect)
            label
              input(type="checkbox", ng-model="gsdisplayfullhostmask", ng-model-options="{ getterSetter: true }")
              | Display full hostmask on join/part/quit ?
      script(type="text/ng-template", id="modalChangeTheme.html")
        .modal-header
          button.close(type='button', ng-click='$dismiss("close")') ×
          h4#myModalLabel.modal-title Select theme
        .modal-body
          .list-group
            a.list-group-item(href="#", ng-repeat="theme in getAllThemes()", ng-class="{active: activeTheme == theme}", ng-click="setTheme(theme)") {{theme}}
      script(type="text/ng-template", id="modalIgnoreList.html")
        .modal-header
          button.close(type='button', ng-click='$dismiss("close")') ×
          h4#myModalLabel.modal-title Ignore list
        .modal-body
          uib-tabset(type="pills")
            uib-tab(heading="{{ignoreItem.ignoreRule}}", select="setActiveIndice($index)", ng-repeat="ignoreItem in ignoreList.list")
              button.btn.btn-primary.pull-right(type="button", ng-model="ignoreItem.isActive", uib-btn-checkbox, btn-checkbox-true="1", btn-checkbox-false="0") {{ignoreItem.isActive ? 'Rule enabled':'Rule disabled'}}
              h4 Strictness
              .btn-group
                label.btn.btn-primary(ng-model="ignoreItem.strictness", uib-btn-radio="1") Dynamic
                label.btn.btn-primary(ng-model="ignoreItem.strictness", uib-btn-radio="2") Permanent
              h4 Rule type
              .btn-group
                label.btn.btn-primary(ng-model="ignoreItem.ignoreType", uib-btn-radio="0") Sender
                label.btn.btn-primary(ng-model="ignoreItem.ignoreType", uib-btn-radio="1") Message
                label.btn.btn-primary(ng-model="ignoreItem.ignoreType", uib-btn-radio="2") CTCP
              h4 Ignore rule
              form.form-inline
                .form-group
                  .input-group
                    input.form-control(type="text", ng-model="ignoreItem.ignoreRule")
                    .input-group-btn
                      button.btn.btn-primary(type="button", ng-model="ignoreItem.isRegEx", uib-btn-checkbox, btn-checkbox-true="1", btn-checkbox-false="0")
                        i.icon-qws(ng-class="{'icon-check-empty': !ignoreItem.isRegEx, 'icon-check': ignoreItem.isRegEx}")
                        span  Regex ?
              h4 Scope
              .form-group
                .input-group
                  input(type="text", ng-model="ignoreItem.scopeRule", token-field)
                  .input-group-btn
                    label.btn.btn-primary(ng-model="ignoreItem.scope", uib-btn-radio="0") Global
                    label.btn.btn-primary(ng-model="ignoreItem.scope", uib-btn-radio="1") Network
                    label.btn.btn-primary(ng-model="ignoreItem.scope", uib-btn-radio="2") Channel
            button.btn.btn-success.btn-sm.pull-right(title="Add a rule", ng-click="createIgnoreItem()")
              i.icon-qws.icon-plus
            button.btn.btn-danger.btn-sm.pull-right(title="Delete current rule", ng-confirm-click="Are you sure you want to delete this rule ?", ng-ok-click="deleteSelectedIgnoreItem()")
              i.icon-qws.icon-trash
        .modal-footer
          button.btn(ng-click="cancelIgnoreList()") Cancel
          button.btn.btn-default(ng-click="saveIgnoreList()") Save
      #container(ng-controller="QuasselController", ng-class="{connecting: connecting, disconnected: disconnected}")
        #header.dropdown(uib-dropdown)
          span.quassel-logo
          span Quassel Web App
          small(ng-if="connecting", ng-cloak)  (connecting)
          small(ng-if="disconnected && !connecting", ng-cloak)  (disconnected)
          button.btn.btn-default.config.dropdown-toggle(data-toggle="dropdown", uib-dropdown-toggle)
            i.icon-qws.icon-cog
          ul.dropdown-menu.dropdown-menu-right(role="menu", uib-dropdown-menu)
            li
              a(href="#", ng-click="configGeneral()") General Configuration
              a(href="#", ng-click="configTheme()") Change Theme
              a(href="#", ng-click="configIgnoreList()", ng-show="displayIgnoreList") Ignore List
          button.btn.btn-default.logout(type="button", ng-if="logged && !disconnected", ng-cloak, ng-click="logout()") Logout
          button.btn.btn-default.reconnect(type="button", ng-if="disconnected && !connecting", ng-cloak, ng-click="reload()") Reconnect
        .container.login(ng-if="!logged")
          .row.ng-cloak(ng-class="{'ng-cloak': connecting}")
            .col-md-3
            .col-md-6.row.login-container
                uib-alert(ng-if="alert != ''", ng-cloak) {{alert}}
                form#logonform(role='form', ng-submit="login()")
                  h1 Connect to Quassel Core
                  .form-group(ng-cloak, ng-hide='#{settings.forcedefault}')
                    label(for='host') Server address
                    input#host.form-control(type='text', value='#{settings.default.host}', ng-model="$parent.host")
                  .form-group(ng-cloak, ng-hide='#{settings.forcedefault}')
                    label(for='port') Server port
                    input#port.form-control(type='text', value='#{settings.default.port}', ng-model="$parent.port")
                  .form-group
                    label(for='user') User name
                    input#user.form-control(type='text', ng-model="$parent.user")
                  .form-group
                    label(for='password') Password
                    input#password.form-control(type='password', ng-model="$parent.password")
                  .checkbox
                    label(for='remember')
                      input#remember(type='checkbox', ng-model="$parent.remember")
                      | Auto login
                  button.btn.btn-primary.btn-connect(type='submit') Connect
            .col-md-3
          .row.ng-cloak.splash(ng-class="{'ng-cloak': connecting}")
            .col-md-3
            .col-md-6
              p.lead.ng-cloak(ng-if="connecting") Connecting
              p.lead(ng-if="!connecting") Loading
              .progress
                .progress-bar.progress-bar-striped.active(role='progressbar', aria-valuenow="100", aria-valuemin="0", aria-valuemax="100", style="width: 100%")
                  span.sr-only Loading
            .col-md-3
        .logged.ng-hide(ng-show="logged", ng-controller="NetworkController")
            #buffer-pane.animation.pane(ng-init="shown = true", ng-class="{small: !shown}")
              .buffer-container(highlight-container)
                .network(
                      id="network-{{network.networkName}}"
                      class="buffer-highlight-{{network.statusBuffer.highlight}}"
                      ng-class="{on: network.isConnected, off: !network.isConnected, active: buffer.id == network.statusBuffer.id}"
                      ng-repeat-start="network in networks | orderBy:'networkName' track by network.networkId"
                      uib-dropdown
                  )
                  span.collapsable(ng-click="network.collapsed = !network.collapsed")
                    i.icon-qws(ng-class="network.collapsed ? 'icon-up-open' : 'icon-down-open'")
                  span.network-name(ng-click="showBuffer(network.getStatusBuffer())") {{network.networkName}}
                  a.dropdown-network.dropdown-toggle(data-toggle="dropdown", uib-dropdown-toggle)
                    i.icon-qws.icon-menu
                  ul.dropdown-menu.dropdown-menu-right(role="menu", uib-dropdown-menu)
                    li
                      a(href="#", ng-click="openModalJoinChannel(network)") Join channel
                    li(ng-if="network.isConnected")
                      a(href="#", ng-click="disconnect(network)") Disconnect
                    li(ng-if="!network.isConnected")
                      a(href="#", ng-click="connect(network)") Connect
                    li
                      a(href="#", ng-click="showhidden = !showhidden") Show / Hide chats
                .network-channels.clearfix(id="{{network.networkName}}-channels", uib-collapse="network.collapsed", ng-repeat-end)
                  .channel(
                        ng-model="channel"
                        drag
                        drop="onDropComplete"
                        class="buffer-highlight-{{channel.highlight}}"
                        ng-class="{on: channel.active, off: !channel.active, active: buffer.id == channel.id}"
                        ng-repeat="channel in network._buffers | channelsFilter track by channel.id"
                        ng-if="showhidden || (!channel.isPermanentlyRemoved && !channel.isTemporarilyRemoved)"
                        uib-dropdown
                    )
                    span.channel-icon
                      i.icon-qws(
                          ng-show="showhidden"
                          ng-class="channel.isPermanentlyRemoved || channel.isTemporarilyRemoved ? 'icon-eye-off' : 'icon-eye'"
                          title="{{channel.isPermanentlyRemoved ? 'Permanently hidden' : channel.isTemporarilyRemoved ? 'Temporarily hidden' : 'Unhidden'}}"
                        )
                    span.channel-name(ng-click="showBuffer(channel)") {{channel.name}}
                    a.dropdown-channel.dropdown-toggle(data-toggle="dropdown", uib-dropdown-toggle)
                      i.icon-qws.icon-menu
                    ul.dropdown-menu.dropdown-menu-right(role="menu", uib-dropdown-menu)
                      li(ng-if="channel.active && channel.isChannel()")
                        a(href="#", ng-click="channelPart(channel)") Part
                      li(ng-if="!channel.active && channel.isChannel()")
                        a(href="#", ng-click="channelJoin(channel)") Join
                      li(ng-if="!channel.active || !channel.isChannel()")
                        a(href="#", ng-confirm-click="Are you sure you want to delete this buffer permanently ?", ng-ok-click="channelDelete(channel)") Delete
                      li(class="dropdown-header") Show / Hide
                      li(ng-if="!channel.isPermanentlyRemoved")
                        a(href="#", ng-click="channelHidePermanently(channel)") Hide permanently
                      li(ng-if="!channel.isTemporarilyRemoved")
                        a(href="#", ng-click="channelHideTemporarily(channel)") Hide temporarily
                      li(ng-if="channel.isPermanentlyRemoved || channel.isTemporarilyRemoved")
                        a(href="#", ng-click="channelUnhide(channel)") Unhide
              .buffer-bottom-bar
                a.btn.showhide.right(href="javascript:void(0)", ng-click="shown = !shown")
                  i.icon-qws(ng-class="shown ? 'icon-left-open' : 'icon-right-open'")
            #center.animation(ng-controller="FilterController")
              .topic
                #topic {{buffer.topic}}
                .btn-group.prefs(uib-dropdown)
                  button.btn.btn-default.btn-sm.dropdown-toggle(type="button", data-toggle="dropdown", uib-dropdown-toggle)
                    i.icon-qws.icon-filter
                  ul.dropdown-menu(role="menu", uib-dropdown-menu)
                    li.dropdown-header Hide events
                    li(ng-repeat="fil in currentFilter")
                      a(href="#")
                        label.checkbox
                          input(type="checkbox", data-message-type="{{::fil.type}}", ng-model="fil.value")
                          | {{::fil.label}}
                    li.divider
                    li
                      a.btn(ng-click="setAsDefault()", href="#") Set as default
                    li
                      a.btn(ng-click="useDefault()", href="#") Use default
              ul.backlog(backlog="loadMore", parent-buffer="buffer", current-filter="currentFilter")
                li.irc-message(
                      scrollme
                      ng-repeat-start="message in messages track by message.sid"
                      class="type-{{::message.type}}"
                      ng-class="{highlighted: message.isHighlighted()}"
                      ng-if="!currentFilter2[message.type]"
                  )
                  span.timestamp
                    span {{::message.datetime | duration}}
                  span.hiddenforcopy  <
                  span.nick(data-nickhash="{{message.type == 1 ? message.sender : '' | hash}}") {{::message | decoratenick}}
                  span.hiddenforcopy > 
                  irc-message.message(message="::message")
                li.markerline.irc-message(irc-markerline, ng-if="buffer.markerline == message.id", ng-repeat-end)
                  span
                  span
                  span
                  span
                  span
              .input(ng-controller="InputController")
                form#messageform(ng-submit="sendMessage()")
                  //input#messagebox(type='text', autocomplete='off', ng-attr-placeholder='{{nick || "Enter your message here"}}', ng-model="inputmessage", ng-model-options="{ debounce: 100 }", caret)
                  #messagebox(contenteditable, mimic-input="true", focusonfocus, ng-attr-placeholder='{{nick || "Enter your message here"}}', ng-model="inputmessage", caret)
                  .formatter
                    button.btn.btn-default.btn-xs.handle(type="button", ng-click="formattervisible = !formattervisible", title="Format")
                      i.icon-qws.icon-brush
                    .formatter-content.btn-group(ng-show="formattervisible", role="group")
                      button.btn.btn-default.btn-sm(ng-click="execCommand('removeFormat')", type="button", title="Remove format")
                        i.icon-qws.icon-eraser
                      button.btn.btn-default.btn-sm(ng-click="execCommand('bold')", type="button", title="Bold")
                        i.icon-qws.icon-bold
                      button.btn.btn-default.btn-sm(ng-click="execCommand('italic')", type="button", title="Italic")
                        i.icon-qws.icon-italic
                      button.btn.btn-default.btn-sm(ng-click="execCommand('underline')", type="button", title="Underline")
                        i.icon-qws.icon-underline
                      .btn-group.formatter-content.formatter-color.dropup(role="group", uib-dropdown)
                        button.btn.btn-default.btn-sm.dropdown-toggle(type="button", data-toggle="dropdown", uib-dropdown-toggle)
                          i.icon-qws.icon-tint
                        ul.dropdown-menu.dropdown-menu-right.list-group(role="menu", uib-dropdown-menu)
                          li.list-group-item
                            h4.list-group-item-heading Foreground color
                            colorpicker.list-group-item-text(colopicker-mode="foreColor")
                          li.list-group-item
                            h4.list-group-item-heading Background color
                            colorpicker.list-group-item-text(colopicker-mode="backColor")
            #nick-pane.animation.pane(ng-init="shown2 = true", ng-class="{small: !shown2}")
              .buffer-container
                .user(ng-repeat="user in buffer.nickUserMap | ordernicks:buffer track by user.nick", uib-dropdown)
                  span.user-icon
                    i.icon-qws.icon-circle(ng-class="user.away ? 'user-away' : 'user-not-away'")
                  span.user-name(ng-class="{'user-op': buffer.isOp(user.nick), 'user-voiced': buffer.isVoiced(user.nick)}") {{user.nick}}
                  a.dropdown-user.dropdown-toggle(data-toggle="dropdown", uib-dropdown-toggle)
                    i.icon-qws.icon-menu
                  ul.dropdown-menu.dropdown-menu-right(role="menu", uib-dropdown-menu)
                    li
                      a(href="#", ng-click="userQuery(user)") Query
              .buffer-bottom-bar
                a.btn.showhide.left(href="javascript:void(0)", ng-click="shown2 = !shown2")
                  i.icon-qws(ng-class="shown2 ? 'icon-right-open' : 'icon-left-open'")

      script(src='#{settings.prefixpath}/javascripts/jquery-2.2.0.min.js')
      script(src='#{settings.prefixpath}/javascripts/angular.min.js')
      script(src='#{settings.prefixpath}/javascripts/angular-aria.min.js')
      script(src='#{settings.prefixpath}/javascripts/ui-bootstrap-tpls-1.1.1.min.js')
      script(src='#{settings.prefixpath}/javascripts/bootstrap-tokenfield.min.js')
      script(src='#{settings.prefixpath}/javascripts/favico-0.3.10.min.js')
      script(src='#{settings.prefixpath}/javascripts/ng-quassel.js')
      script(src='#{settings.prefixpath}/javascripts/angular-sanitize.js')
      script(src='#{settings.prefixpath}/javascripts/angular-dnd.min.js')
      script(src='#{settings.prefixpath}/javascripts/angular-notify.min.js')
      script(src='#{settings.prefixpath}/javascripts/libquassel.js')
      script(src='#{settings.prefixpath}/javascripts/angular-init.js')
      script(src='#{settings.prefixpath}/javascripts/angular-directive.js')
      script(src='#{settings.prefixpath}/javascripts/angular-filter.js')
      script(src='#{settings.prefixpath}/javascripts/angular-controller.js')
